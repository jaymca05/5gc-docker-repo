name: Build & Deploy Open5GS via Matrix Strategy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1. Dedicated job to build and push the base image FIRST
  build_base_image:
    name: Build & Push Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch if needed)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push base image
        uses: docker/build-push-action@v5
        with:
          context: ./base
          file: ./base/Dockerfile
          push: true
          tags: jaybhu05/open5gs-base:latest
          cache-from: type=registry,ref=jaybhu05/open5gs-base:latest
          cache-to: type=inline

  # 2. Job for all other dependent images, which runs ONLY AFTER the base image is ready
  build_dependent_images:
    name: Build & Push ${{ matrix.service }}
    needs: build_base_image # Ensure base image is finished pushing before starting dependents
    runs-on: ubuntu-latest
    
    # Define the services to be built and pushed using a matrix (excluding 'base')
    strategy:
      fail-fast: false
      matrix:
        service: [nrf, udm, ausf, pcf, amf, smf, upf] # 'base' service removed
        repository: [jaybhu05]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch if needed)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # Build and push the image for the current matrix service
      - name: Build & push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          # Context is the directory name, pulled from the matrix
          context: ./${{ matrix.service }}
          # Dockerfile is assumed to be 'Dockerfile' inside the context directory
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          # Tags are defined using the matrix service name
          tags: ${{ matrix.repository }}/open5gs-${{ matrix.service }}:latest

          # --- CRITICAL FIX: Pass the fully qualified base image name as a build argument ---
          build-args: |
            BASE_IMAGE_NAME=${{ matrix.repository }}/open5gs-base:latest
            
          # Optional: Enable caching from the previously pushed image
          cache-from: type=registry,ref=${{ matrix.repository }}/open5gs-${{ matrix.service }}:latest
          cache-to: type=inline

  deploy:
    name: Deploy to Server
    needs: build_dependent_images # Update dependency to the new job name
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository (for deployment files)
        uses: actions/checkout@v4

      - name: Package Open5GS files
        # Assuming 'open5gs-docker/' contains the necessary deployment files (like docker-compose.yml)
        run: |
          zip -r open5gs-package.zip open5gs-docker/

      - name: Deploy to server via SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Setup SSH key and permissions
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # SCP and SSH commands
          scp -o StrictHostKeyChecking=no open5gs-package.zip project@10.0.2.15:/home/project/
          ssh -o StrictHostKeyChecking=no project@10.0.2.15 '
            echo "Deployment started on server..."
            cd /home/project
            unzip -o open5gs-package.zip
            echo "Pulling latest images (which were just pushed)..."
            docker-compose pull
            echo "Bringing up services..."
            docker-compose up -d
          '
          echo "Deployment command sent successfully."

